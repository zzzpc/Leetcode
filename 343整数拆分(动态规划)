class Solution {
    public int integerBreak(int n) {

        //动态数组来表示
        //n 可以拆分为整数i和j 
        //她们的乘积有两种情况 一种是
        // res=max(i*(N-I),i*dp[(n-i)]);
         int[] dp=new int[n+1];
        dp[0]=0;
        dp[1]=0;
        for(int i=2;i<=n;i++){
            for(int j=0;j<=i;j++){
                int tmp=Math.max(j*(i-j),j*dp[i-j]);
                dp[i]=Math.max(dp[i],tmp);
            }
        }
        return dp[n];
    }
}



//动态规划的思想   将整数n可以拆分为i 和 j   而它的乘积大小由j是否能继续拆分做决定
                dp[0]=dp[1]=0;
                
                从i=2开始   i可以拆分为j  和  i-j    这样只用枚举从0-n 返回dp[n]就是最终结果
                      dp[i]=Math(i*j,i*dp[i-j])// 因为j是从i中分解得到的 所以计算得到dp[i]时，dp[i-i]是已知的
