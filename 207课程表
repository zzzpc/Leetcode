class Solution {
       public boolean canFinish(int numCourse, int[][] prerequest) {
        int [] indegre=new int[numCourse];  //入度表
        List<List<Integer>> adiacency=new ArrayList<>(); //新建邻接表
        Queue<Integer> queue=new LinkedList<>();  
        for(int i=0;i<numCourse;i++){
            adiacency.add(new ArrayList<>()); //每一门课程新建邻接表
        }
        for(int[] cp: prerequest){
            indegre[cp[0]]++;   //入度加一  先修课程
            adiacency.get(cp[1]).add(cp[0]);   //遍历的同时  构建邻接表
        }
        for(int i=0;i<numCourse;i++){
            if(indegre[i]==0 )  queue.add(i);   //当某个顶点的入度为0时，则将其加入队列当中

        }
        while (!queue.isEmpty()){
            int pp=queue.poll();
            numCourse--;
            for(int cur:adiacency.get(pp)){
                if(--indegre[cur]==0)  queue.add(cur);   //当入度为0时，将其添加队列
            }
           
        }
         return numCourse==0;
       }
}
/*
图的遍历  是否位有向环图
新建邻接表    将所有节点关系转换位邻接表之间的关系
新建队列      将所有的入度位零的节点添加到队列中
遍历队列      出队当前对顶元素，遍历其邻接表，使其相应节点的入度减一  ，此时再将入度位零的节点添加到队列中
每次遍历完队列后  元素减一
最终判断是否元素位0


*/
