/*
// Definition for a Node.
class Node {
    public int val;
    public Node left;
    public Node right;
    public Node next;

    public Node() {}
    
    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, Node _left, Node _right, Node _next) {
        val = _val;
        left = _left;
        right = _right;
        next = _next;
    }
};
*/

class Solution {
    public Node connect(Node root) {
        if(root==null) return null;
        Queue<Node> queue=new LinkedList<Node>();
        queue.offer(root);
        while(!queue.isEmpty()){
            int len=queue.size();
            Node last=null;
           for (int i = 1; i <=len ; i++) {
                Node pre=queue.poll();
                if(pre.left!=null)  queue.offer(pre.left);
                if(pre.right!=null) queue.offer(pre.right);
                if(i!=1){
                    last.next=pre;
                }
                last=pre;
            }
        }
        return root;
    }
   
}

//利用层序遍历的思想
//每次出队同一层发所有节点，然后除开第一个节点，每一个节点的v后继节点就是依次出队的顺序
