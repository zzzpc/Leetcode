class Solution {
   
    public static  List<List<Integer>> fourSum(int[] nums, int target) {
            List<List<Integer>> ans= new ArrayList<List<Integer>>();
            if(nums==null || nums.length<4){
                return ans;
            }
            Arrays.sort(nums); //对数组进行排序
            int len=nums.length;
        for (int i = 0; i < len-3; i++) {
            if(i>0 && nums[i]==nums[i-1])  { // 如果当前元素与上一个元素相等
                continue;
            }
            if(nums[i]+nums[i+1]+nums[i+2]+nums[i+3]>target){
                break;  //如果最小的四个元素大于target则推出循环
            }
            if(nums[i]+nums[len-3]+nums[len-2]+nums[len-1]<target){
                continue; //如果剩余最大的三个元素小于target也进行下一次遍历
            }
            for(int j=i+1;j<len-2;j++){
                if(j>i+1 && nums[j]==nums[j-1]){
                    continue;
                }
                if(nums[j]+nums[i]+nums[j+1]+nums[j+2]>target) break;
                if(nums[j]+nums[i]+nums[len-1]+nums[len-2]<target) continue;
                int left=j+1, right=len-1;  //选取剩余的两个数  ，利用双指针的性质来减轻时间复杂度
                while(left<right){
                    if(nums[left]+nums[right]+nums[i]+nums[j]==target){
                        ans.add(Arrays.asList(nums[i], nums[j], nums[left], nums[right]));
                        while (left<right && nums[left]==nums[left+1]){ //去重操作
                            left++;
                        }
                        left++; //如果不满足while条件则相应指针都需移动
                        while (left<right && nums[right]==nums[right-1]){ //去重操作
                            right--;
                        }
                        right--;
                    }
                    else if(nums[left]+nums[right]+nums[i]+nums[j]<target){
                        left++;
                    }
                    else{
                        right--;
                    }
                }
            }

        }
        return  ans;
    }
}


//for循环  先选择两个数 并且每个数的选择不能与之前一样(第一步去重)，没选择一个数，它的索引必须大于上一个数 选择两个数后（剩余两个数可以用双指针进行遍历 并且在比遍历的同时进行去重操作）
