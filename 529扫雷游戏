/*
     step1 : 判断当前点击点是否为地雷
            如果不是： 统计其周围8个点是否有地雷， 然后更新当前点周围地雷个数
            
            再遍历当前点周围的点，如果未被挖到并且没有如果队列则将其入队
            
            知道队列为空




*/


class Solution {
     public  int  dir[][]={{0,1},{0,-1},{1,0},{1,1},{1,-1},{-1,0},{-1,-1},{-1,1}};
    public char[][] updateBoard(char[][] board, int[] click) {
          int x=click[0], y=click[1];
             if(board[x][y]=='M')  board[x][y]='X';  //若一开始点到雷，则直接游戏结束
             else{
                 BFS(board,x,y);
             }
            return board;
    }
     public void BFS(char[][] board, int t_x, int t_y){
                Queue<int[]>  queue=new LinkedList<int[]>();
                boolean vis[][]=new boolean[board.length][board[0].length];
                queue.offer(new int[]{t_x,t_y});
                vis[t_x][t_y]=true;
                while(!queue.isEmpty()){
                    int pos[]=queue.poll();
                    int cnt=0, x=pos[0],y=pos[1];
                    for(int i=0;i<8;i++){
                        int tmp_x=x+dir[i][0];
                        int tmp_y=y+dir[i][1];
                        if(tmp_x<0 || tmp_x>=board.length || tmp_y<0 || tmp_y>=board[0].length)  continue;

                        if(board[tmp_x][tmp_y]=='M') cnt++;

                    }
                    //先出队元素，遍历其周围8个方向的元素，判断是否有雷并统计个数
                    if(cnt>0) board[x][y]=(char) (cnt+'0');   //如果有雷，则修正当前字符为雷的个数
                    else{
                        board[x][y]='B';      //否则，当前字符为B 表示无雷
                        for(int i=0;i<8;i++){
                            int tmp_x=x+dir[i][0];
                            int tmp_y=y+dir[i][1];
                            if(tmp_x<0 || tmp_x>=board.length || tmp_y<0 || tmp_y>=board[0].length|| board[tmp_x][tmp_y]!='E' || vis[tmp_x][tmp_y])  continue;

                            //如果是无雷，再遍历其周围元素并且将其入队
                            queue.offer(new int[]{tmp_x,tmp_y});
                            vis[tmp_x][tmp_y]=true;
                        }


                    }
                }

        }

}
