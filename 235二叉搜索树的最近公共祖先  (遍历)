/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
   // 两次遍历的方法
class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
         List<TreeNode> path_p=getPath(root,p);  //找出根节点到节点p的路径
        List<TreeNode> path_q=getPath(root,q);   //找出根节点到节点q的路径
        TreeNode ancestor=null;
        for (int i = 0; i <path_p.size() &&i<path_q.size() ; i++) {
            if(path_p.get(i)==path_q.get(i)){
                ancestor=path_p.get(i);    //找出最近的公共祖先
            }else{
                break;
            }
        }
        return ancestor;
    }
   public List<TreeNode> getPath(TreeNode root, TreeNode target){
        List<TreeNode> path=new ArrayList<TreeNode>();
        TreeNode node=root;
        while(node!=target){
            path.add(node);
            if(node.val>=target.val){
                node=node.left;
            }
            else  node=node.right;
        }
        path.add(node);
        return  path;
    }
}


//一次遍历的方法  节省两次遍历所需的空间消耗  因为二叉搜索树的特点当当前节点大于节点p,q时证明两节点在其左子树 如果小于则在其右子树
//否则 要么是分叉节点  要么当前节点为二者其一

class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        TreeNode ancestor = root;
        while (true) {
            if (p.val < ancestor.val && q.val < ancestor.val) {
                ancestor = ancestor.left;
            } else if (p.val > ancestor.val && q.val > ancestor.val) {
                ancestor = ancestor.right;
            } else {
                break;
            }
        }
        return ancestor;
    }
}
