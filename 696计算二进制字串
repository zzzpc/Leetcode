/*
给定一个字符串 s，计算具有相同数量0和1的非空(连续)子字符串的数量，并且这些子字符串中的所有0和所有1都是组合在一起的。重复出现的子串要计算它们出现的次数。

输入: "00110011"
输出: 6
解释: 有6个子串具有相同数量的连续1和0：“0011”，“01”，“1100”，“10”，“0011” 和 “01”。

*/
class Solution {
    public int countBinarySubstrings(String s) {
             int len=s.length();
             int ptr=0,last=0,ans=0;
             while(ptr<len){
                 int c=s.charAt(ptr);
                 int counter=0;
                 while(ptr<len && s.charAt(ptr)==c){
                        ptr++;
                        counter++;
                 }
                 ans+=Math.min(counter,last);
                 last=counter;
             }
            return ans;
    }       
}


/*
可以进行统计字符串0，1个数并记录
00110011 ————> 2222,相邻数字之间一定是不同的字符， 然后选择相邻两个数的较小值累加即为最终答案

*/
