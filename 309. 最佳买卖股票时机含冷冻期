class Solution {
    public int maxProfit(int[] prices) {

        int  len=prices.length;
        if(len==0 || len==1)  return 0;
        int[][] dp=new int[len][3]; 
        //加上冷冻期就相当于加上一个状态，因为相比于之前在卖出后多了一天时间的冷冻期也就是说 冷冻状态只能由卖出来进行转达
        //0代表卖出股票 1代表买入股票  而2则代表该只股票进入冷冻期
        dp[0][0]=0;    //第0天结束后手中没有股票   没有股票可以是由两种状态转移，一种是前一天也没有股票 或是前一天有但是今天卖了
        dp[0][1]=-prices[0]; //第0天结束后手中有股票  可以是前一天手中含有股票也可以是前一天处于冷冻期
        dp[0][2]=0;  //第0天结束处于冷冻期 只有一种情况 就是前一天含有股票并且已经卖出 

        for(int i=1;i<len;i++){
            dp[i][0]=Math.max(dp[i-1][0],dp[i-1][1]+prices[i]);
            dp[i][1]=Math.max(dp[i-1][1],dp[i-1][2]-prices[i]);
            dp[i][2]=dp[i-1][0];
        }
        return Math.max(dp[len-1][0], dp[len-1][2]);
    }
}




//需要注意   含有冷冻期在初始化问问题上  第0天结束后该股票处于冷冻期的状态应该为0 
